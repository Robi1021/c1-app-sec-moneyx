# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # note on ${} vs $(): 
  #   variables with $() are pushed into the pipeline when the actual pipeline is created
  #   somehow some variables could not be pushed at that moment, so
  #   variables with ${} are replaced by the script when the azure-pipelines.sample.yml is copied to an actual azure-pipeline.yml, those become hardcoded in the azure-pipeline.yml

  serviceConnectionForDockerRegistry: '${SERVICECONNECTIONFORDOCKERREGISTRY}'
  imageRepository: '${IMAGEREPOSITORY}'
  containerRegistry: '${CONTAINERREGISTRY}'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: '${IMAGEPULLSECRET}'
  environment: '${APP}'
  _dssc_host: '$(DSSC_HOST)'
  _dssc_username: '$(DSSC_USERNAME)'
  _dssc_temppw: '$(DSSC_TEMPPW)'
  _dssc_password: '$(DSSC_PASSWORD)'
  _dssc_reguser: '$(DSSC_REGUSER)'
  _dssc_regpassword: '$(DSSC_REGPASSWORD)'
  _trend_ap_key: '$(TREND_AP_KEY)'
  _trend_ap_secret: '$(TREND_AP_SECRET)'
  _azure_acr_loginserver: '$(AZURE_ACR_LOGINSERVER)'
  _azure_project: '$(AZURE_PROJECT)'
  _tag: '$(tag)'
  _acr_username: '$(ACR_USERNAME)'
  _acr_password: '$(ACR_PASSWORD)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(serviceConnectionForDockerRegistry)
        tags: |
          $(tag)

    # Scan the Container Image with Deep Security Smart Check
    - script: |
        echo 'Adding self-signed certificate of SmartCheck to trusted certificates for Docker'
        openssl s_client -showcerts -connect $(_dssc_host):443 < /dev/null | \
          sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > $(_dssc_host).crt
        sudo cp $(_dssc_host).crt /usr/local/share/ca-certificates/$(_dssc_host).crt
        sudo mkdir -p /etc/docker/certs.d/$(_dssc_host):5000
        sudo cp $(_dssc_host).crt /etc/docker/certs.d/$(_dssc_host):5000/ca.crt
        sudo update-ca-certificates

        echo 'Sending Image to scanner'
        docker run  -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/:/root/.cache/ deepsecurity/smartcheck-scan-action --preregistry-scan --preregistry-password=$(_dssc_regpassword) --preregistry-user=$(_dssc_reguser) --image-name=$(containerRegistry)/$(imageRepository):$(_tag) --smartcheck-host=$(_dssc_host) --smartcheck-user=$(_dssc_username) --smartcheck-password=$(_dssc_password) --insecure-skip-tls-verify         --insecure-skip-registry-tls-verify  --findings-threshold='{"malware": 0, "vulnerabilities": { "defcon1": 0, "critical": 0, "high": 0 }, "contents": { "defcon1": 0, "critical": 0, "high": 0 }, "checklists": { "defcon1": 0, "critical": 0, "high": 0 }}'
      displayName: "Scaning image pre-registry"

    - task: Docker@2
      displayName: Pushing image to ACR
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(serviceConnectionForDockerRegistry)
        tags: |
          $(tag)

    - script: |
        echo testing docker login
        echo docker login  $(_azure_project_uid).azurecr.io -u $(_acr_username) -p $(_acr_password) 
        docker login  $(_azure_project_uid).azurecr.io -u $(_acr_username) -p $(acr_password) 
        
        echo 'Sending Image to scanner'
        docker run  -v /var/run/docker.sock:/var/run/docker.sock -v \$HOME/.cache/:/root/.cache/ deepsecurity/smartcheck-scan-action \
        --image-name="$(containerRegistry)/$(imageRepository):$(_tag)" \
        --smartcheck-host="$(_dssc_host)" \
        --smartcheck-user="$(_dssc_username)" \
        --smartcheck-password="$(_dssc_password)" \
        --image-pull-auth='{"username": "'$(_acr_username)'","password": "'$(_acr_password)'"}' \
        --insecure-skip-tls-verify \
        --insecure-skip-registry-tls-verify \
        --findings-threshold='{"malware": 0, "vulnerabilities": { "defcon1": 0, "critical": 0, "high": 0 }, "contents": { "defcon1": 0, "critical": 0, "high": 0 }, "checklists": { "defcon1": 0, "critical": 0, "high": 0 }}'
      displayName: "Scanning image in ACR"

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: '${APP}'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Creating imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(serviceConnectionForDockerRegistry)
              kubernetesServiceConnection: ${SERVICECONNECTIONFORKUBERNETES}

          # Set Environment Variables for Cloud One Application Security
          - script: |
              sed -i 's|_TREND_AP_KEY|$(TREND_AP_KEY)|' $(Pipeline.Workspace)/manifests/deployment.yml
              sed -i 's|_TREND_AP_SECRET|$(TREND_AP_SECRET)|' $(Pipeline.Workspace)/manifests/deployment.yml
            displayName: "Configure Cloud One Application Security"

          - task: KubernetesManifest@0
            displayName: Deploying to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
              kubernetesServiceConnection: ${SERVICECONNECTIONFORKUBERNETES}
              
